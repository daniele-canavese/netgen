diff -ruN include/libtstat.h include/libtstat.h
--- include/libtstat.h	2016-05-24 14:31:12.000000000 +0200
+++ include/libtstat.h	2021-02-22 15:23:23.620000000 +0100
@@ -45,3 +45,70 @@
 #endif
 
 #endif
+
+
+/* Core statistics libtstat export structs*/
+struct stcp_core_statistics
+{
+	unsigned long int id_number;
+
+	u_int32_t c2s_ip;
+	u_short c2s_port;
+	u_long c2s_packets;
+	u_char c2s_reset_count;
+	u_long c2s_ack_pkts;
+	u_long c2s_pureack_pkts;		/* mallman - pure acks, no data */
+	u_long c2s_unique_bytes;		/* bytes sent (-FIN/SYN), excluding rexmits */
+	u_long c2s_data_pkts;
+	u_long c2s_data_bytes;
+	u_int c2s_rexmit_pkts;
+	u_int c2s_rexmit_bytes;
+	u_int c2s_out_order_pkts;
+	u_char c2s_syn_count;
+	u_char c2s_fin_count;
+	
+	u_int32_t s2c_ip;
+	u_short s2c_port;
+	u_long s2c_packets;
+	u_char s2c_reset_count;
+	u_long s2c_ack_pkts;
+	u_long s2c_pureack_pkts;		/* mallman - pure acks, no data */
+	u_long s2c_unique_bytes;		/* bytes sent (-FIN/SYN), excluding rexmits */
+	u_long s2c_data_pkts;
+	u_long s2c_data_bytes;
+	u_int s2c_rexmit_pkts;
+	u_int s2c_rexmit_bytes;
+	u_int s2c_out_order_pkts;
+	u_char s2c_syn_count;
+	u_char s2c_fin_count;
+	
+	double first_time;
+	double last_time;
+	double completion_time;
+	
+	double c2s_payload_start_time;
+	double c2s_payload_end_time;
+	double c2s_ack_start_time;
+	double s2c_payload_start_time;
+	double s2c_payload_end_time;
+	double s2c_ack_start_time;
+		
+	u_char complete;
+	u_char reset;
+	u_char nocomplete;
+};
+typedef struct stcp_core_statistics tcp_core_statistics;
+
+struct stcs_list_elem
+{
+  struct stcs_list_elem *next;
+  struct stcs_list_elem *prev;
+  tcp_core_statistics *stat;
+};
+typedef struct stcs_list_elem tcs_list_elem;
+
+extern tcs_list_elem* tcs_list_start;
+extern int tstat_export_core_statistics_init(const char*, const char*, int, int, int);
+extern int tstat_export_core_statistics_read_chunk(int,char);
+extern void tstat_tcs_list_release();
+extern void tstat_export_core_statistics_close(int);
diff -ruN tstat/Makefile.sources tstat/Makefile.sources
--- tstat/Makefile.sources	2016-05-24 14:35:11.000000000 +0200
+++ tstat/Makefile.sources	2021-02-22 15:23:28.680000000 +0100
@@ -43,7 +43,8 @@
     $(top_srcdir)/tstat/base64.h\
     $(top_srcdir)/tstat/rijndael.h\
     $(top_srcdir)/tstat/uthash.h\
-    $(top_srcdir)/tstat/globals.h
+    $(top_srcdir)/tstat/globals.h\
+    $(top_srcdir)/tstat/pcapwrapper.h
 
 CFILES=$(top_srcdir)/tstat/compress.c \
        $(top_srcdir)/tstat/etherpeek.c \
@@ -99,4 +100,5 @@
        $(top_srcdir)/tstat/panon.c\
        $(top_srcdir)/tstat/crypto.c\
        $(top_srcdir)/tstat/globals.c\
-       $(top_srcdir)/tstat/tls_services.c
+       $(top_srcdir)/tstat/tls_services.c\
+       $(top_srcdir)/tstat/pcapwrapper.c
diff -ruN tstat/pcapwrapper.c tstat/pcapwrapper.c
--- tstat/pcapwrapper.c	1970-01-01 01:00:00.000000000 +0100
+++ tstat/pcapwrapper.c	2021-02-22 15:23:28.680000000 +0100
@@ -0,0 +1,239 @@
+/*
+ *
+ * Copyright (c) 2001
+ *	Politecnico di Torino.  All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * Author:	Marco Mellia, Andrea Carpani, Luca Muscariello, Dario Rossi
+ * 		Telecomunication Networks Group
+ * 		Politecnico di Torino
+ * 		Torino, Italy
+ *              http://www.tlc-networks.polito.it/index.html
+ *		mellia@mail.tlc.polito.it, rossi@mail.tlc.polito.it
+ *
+ * Tstat is deeply based on TCPTRACE. The authors would like to thank
+ * Shawn Ostermann for the development of TCPTRACE.
+ *
+*/
+
+#include "pcapwrapper.h"
+
+/* global pointer, the pcap info header */
+static pcap_t *pcap;
+
+/* Interaction with pcap */
+static struct ether_header eth_header;
+static struct pcap_pkthdr pcap_current_hdr;
+static unsigned char *pcap_current_buf;
+
+#define EH_SIZE sizeof(struct ether_header)
+static char *ip_buf;		/* [IP_MAXPACKET] */
+static void *callback_plast;
+
+struct pcap_pkthdr *callback_phdr;
+
+
+#define PCAP_DLT_EN10MB 1   
+#define ETHERTYPE_8021Q 0x8100
+#define IEEE8021Q_SIZE  18
+
+/* This function determine the offset for the IP packet in an Ethernet frame */
+static int
+find_ip_in_ethframe (char *buf)
+{
+  unsigned short eth_proto_type;	/* the protocol type field of the Ethernet header */
+  int offset = -1;		/* the calculated offset that this function will return */
+
+  memcpy (&eth_proto_type, buf + 12, 2);
+  eth_proto_type = ntohs (eth_proto_type);
+  switch (eth_proto_type)
+    {
+    case ETHERTYPE_IP:		/* it's pure IPv4 over ethernet */
+      offset = 14;
+      break;
+    case ETHERTYPE_8021Q: //VLAN
+      offset = 18;
+      break;
+    default:			/* well, this is not an IP packet */
+      offset = -1;
+      break;
+    }
+  return offset;
+}
+
+/* function invoked by pcap library to handle a 
+ * new packet captured (or readed for input trace)
+ */
+static int
+read_pckt_callback (char *user, struct pcap_pkthdr *phdr, char *buf)
+{
+    int type;
+    int iplen;
+    static int offset = -1;
+
+    iplen = phdr->caplen;
+    if (iplen > IP_MAXPACKET)
+        iplen = IP_MAXPACKET;
+
+    type = pcap_datalink (pcap);
+
+    /* remember the stuff we always save */
+    callback_phdr = phdr;
+    pcap_current_hdr = *phdr;
+    pcap_current_buf = buf;
+
+    /* kindof ugly, but about the only way to make them fit together :-( */
+    switch (type)
+    {
+        case 100:
+            /* for some reason, the windows version of tcpdump is using */
+            /* this.  It looks just like ethernet to me */
+        case PCAP_DLT_EN10MB:
+            /* Here we check if we are dealing with Straight Ethernet encapsulation or PPPoE */
+            offset = find_ip_in_ethframe (buf);	
+            iplen -= offset;
+            memcpy (&eth_header, buf, EH_SIZE);	/* save ether header */
+            switch (offset)
+            {
+                /* Not an IP packet */
+                case -1:
+                    return (-1);
+
+                /* straight Ethernet encapsulation */
+                case EH_SIZE:
+                    memcpy ((char *) ip_buf, buf + offset, iplen);
+                    callback_plast = ip_buf + iplen - 1;
+                    break;
+
+                /* VLAN encapsulation */
+                case IEEE8021Q_SIZE:
+                  /* we use a fake ether type here */
+                  eth_header.ether_type = htons (ETHERTYPE_IP);
+                  memcpy ((char *) ip_buf, buf + offset, iplen);
+                  callback_plast = ip_buf + iplen - 1;
+                  break;
+
+                /* should not be used, but we never know ... */
+                default:		
+                    return (-1);
+            }
+            break;
+        default:
+            fprintf (stderr, "Don't understand link-level format (%d)\n", type);
+            exit (1);
+    }
+
+    /* everything fine */
+    return 0;
+}
+
+
+/* internal function to read packet using pcap library */
+int
+read_pckt (struct timeval *ptime, 
+               struct ip **ppip, 
+               void **pplast, 
+               int *ptlen)
+{
+    int ret;
+
+    while (1)
+    {
+        /* registering a callback function so we can analize packet
+         * readed using pcap library
+         */
+        if ((ret = pcap_dispatch (pcap, 1, (pcap_handler) read_pckt_callback, 0)) != 1)
+        {
+            /* prob EOF */
+            if (ret == -1)
+            {
+                char *error;
+                error = pcap_geterr (pcap);
+
+                if (error && *error)
+                    fprintf (stderr, "PCAP error: '%s'\n", pcap_geterr (pcap));
+                /* else, it's just EOF */
+                return (-1);
+            }
+
+            /* from a file itshould be an EOF */
+            return (0);
+        }
+
+        /* if it's not IP, then skip it */
+        if (ntohs (eth_header.ether_type) != ETHERTYPE_IP)
+        {
+            fprintf (stderr, "pread_tcpdump: not an IP packet (type=%d)\n", eth_header.ether_type);
+            continue;
+        }
+        break;
+
+    }
+
+    /* fill in all of the return values */
+    *ppip = (struct ip *) ip_buf;
+    *pplast = callback_plast;	/* last byte in IP packet */
+    /* (copying time structure in 2 steps to avoid RedHat brain damage) */
+    ptime->tv_usec = callback_phdr->ts.tv_usec;
+    ptime->tv_sec = callback_phdr->ts.tv_sec;
+    *ptlen = callback_phdr->caplen;
+    return 1;
+}
+
+/* init internal structures and return a pointer to function that
+ * read packets using pcal library
+ */
+pcapwrapper_pfunc * pcapwrapper_init (char *trace_fname, int islive, int buffer_size, int timeout)
+{
+    char errbuf[100];
+    char *physname = "<unknown>";
+    int type;
+	printf("Starting pcapwrapper_init with arguments %s %d %d %d\n",trace_fname,islive,buffer_size,timeout);
+	if(!islive)
+	{
+		printf("Starting tstat offline analysis on trace %s\n",trace_fname);
+		if ((pcap = pcap_open_offline (trace_fname, errbuf)) == NULL)
+		{
+			fprintf (stderr, "PCAP said: '%s'\n", errbuf);
+			return (NULL);
+		}
+	}
+	else
+	{
+		printf("Starting tstat live analysis on interface %s buffer size %d timeout %d\n",trace_fname,buffer_size,timeout);
+		if ((pcap = pcap_open_live (trace_fname, buffer_size, 1, timeout, errbuf)) == NULL)
+		{
+			fprintf (stderr, "PCAP said: '%s'\n", errbuf);
+			return (NULL);
+		}
+	}
+	
+    /* check the phys type (pretend everything is ethernet) */
+    memset (&eth_header, 0, EH_SIZE);
+    switch (type = pcap_datalink (pcap))
+    {
+        case 100:
+        case PCAP_DLT_EN10MB:
+            /* OK, we understand this one */
+            physname = "Ethernet";
+            break;
+        default:
+            fprintf (stderr, "tcptrace did not understand link format (%d)!\n",
+                    type);
+            fprintf (stderr,
+                    "\t If you can give us a capture file with this link format\n\
+                    \t or even better, a patch to decipher this format, we shall add it in, \n\
+                    \t in a future release.\n");
+            rewind (stdin);
+            return (NULL);
+    }
+
+    /* set up some stuff */
+    ip_buf = calloc (65535, sizeof(char));
+
+    return (read_pckt);
+}
diff -ruN tstat/pcapwrapper.h tstat/pcapwrapper.h
--- tstat/pcapwrapper.h	1970-01-01 01:00:00.000000000 +0100
+++ tstat/pcapwrapper.h	2021-02-22 15:23:28.680000000 +0100
@@ -0,0 +1,46 @@
+/*
+ *
+ * Copyright (c) 2001
+ *	Politecnico di Torino.  All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * Author:	Marco Mellia, Andrea Carpani, Luca Muscariello, Dario Rossi
+ * 		Telecomunication Networks Group
+ * 		Politecnico di Torino
+ * 		Torino, Italy
+ *              http://www.tlc-networks.polito.it/index.html
+ *		mellia@mail.tlc.polito.it, rossi@mail.tlc.polito.it
+ *
+ * Tstat is deeply based on TCPTRACE. The authors would like to thank
+ * Shawn Ostermann for the development of TCPTRACE.
+ *
+*/
+#ifndef H_PCAPWRAPPER
+#define H_PCAPWRAPPER
+
+#include <stdio.h>
+#include <fcntl.h>
+#include <pcap.h>
+#include <sys/socket.h>
+#include <net/if.h>
+#include <netinet/in.h>
+#include <netinet/in_systm.h>
+#include <arpa/inet.h>
+#include <netinet/if_ether.h>
+#include <netinet/ip.h>
+#include <netinet/tcp.h>
+#include <netinet/udp.h>
+#include <string.h>
+#include <stdlib.h>
+
+typedef int pcapwrapper_pfunc (struct timeval *ptime, struct ip **ppip, 
+                               void **pplast, int *ptlen);
+
+pcapwrapper_pfunc * pcapwrapper_init (char *trace_fname, int islive, int buffer_size, int timeout);
+
+
+#endif /* H_PCAPWRAPPER */
diff -ruN tstat/struct.h tstat/struct.h
--- tstat/struct.h	2016-05-24 14:35:12.000000000 +0200
+++ tstat/struct.h	2021-02-22 15:23:28.680000000 +0100
@@ -1238,3 +1238,4 @@
   char   *svalue;
   } value;
 } param_value;
+
diff -ruN tstat/tcp.c tstat/tcp.c
--- tstat/tcp.c	2016-05-28 18:14:02.000000000 +0200
+++ tstat/tcp.c	2021-02-22 15:23:28.680000000 +0100
@@ -98,6 +98,16 @@
 void update_streaming_log(tcp_pair *tcp_save, tcb *pab, tcb *pba);
 #endif
 
+/* Core statistics libtstat export declarations and globals*/
+tcs_list_elem* tcs_list_start = NULL;	/* starting point of the linked list */
+tcs_list_elem* tcs_list_curr = NULL;	/* current insert point of the linked list */
+tcp_core_statistics* from_tcp_pair_to_core_statistics(tcp_pair*);
+tcs_list_elem* tcs_list_alloc(tcp_core_statistics*);
+void tcs_list_release_elem(tcs_list_elem*);
+void tstat_tcs_list_release();
+tcs_list_elem* tstat_return_tcp_pairs();
+void tstat_print_tcs_list_statistics();
+
 /* Patterns for SSL_youtube*/
 regex_t yt_re[4];
 
@@ -3962,6 +3972,11 @@
 free_tp (tcp_pair * ptp_save)
 {
   int i;
+  
+  // Needed for libtstat core statistics export functions
+  // Saves core statistics of the soon-to-be purged flow to the export list
+  tcs_list_alloc(from_tcp_pair_to_core_statistics(ptp_save));
+  
   /* free up memory for the flow stats */
 
   /* for each quad then for each segment in each quad... */
@@ -4009,3 +4024,168 @@
   quadrant_release (*ppquad);
   *ppquad = NULL;
 }
+
+/* Core statistics libtstat export functions*/
+tcp_core_statistics* from_tcp_pair_to_core_statistics(tcp_pair *ptp)
+{
+	tcp_core_statistics *stats = malloc(sizeof *stats);
+	
+	stats->id_number = ptp->id_number;
+	
+	stats->c2s_ip = (ptp->addr_pair).a_address.un.ip4.s_addr;
+	stats->c2s_port = (ptp->addr_pair).a_port;
+	stats->c2s_packets = (ptp->c2s).packets;
+	stats->c2s_reset_count = (ptp->c2s).reset_count;
+	stats->c2s_ack_pkts = (ptp->c2s).ack_pkts;
+	stats->c2s_pureack_pkts = (ptp->c2s).pureack_pkts;
+	stats->c2s_unique_bytes = (ptp->c2s).unique_bytes;
+	stats->c2s_data_pkts = (ptp->c2s).data_pkts;
+	stats->c2s_data_bytes = (ptp->c2s).data_bytes;
+	stats->c2s_rexmit_pkts = (ptp->c2s).rexmit_pkts;
+	stats->c2s_rexmit_bytes = (ptp->c2s).rexmit_bytes;
+	stats->c2s_out_order_pkts = (ptp->c2s).out_order_pkts;
+	stats->c2s_syn_count = (ptp->c2s).syn_count;
+	stats->c2s_fin_count = (ptp->c2s).fin_count;
+	
+	stats->s2c_ip = (ptp->addr_pair).b_address.un.ip4.s_addr;
+	stats->s2c_port = (ptp->addr_pair).b_port;
+	stats->s2c_packets = (ptp->s2c).packets;
+	stats->s2c_reset_count = (ptp->s2c).reset_count;
+	stats->s2c_ack_pkts = (ptp->s2c).ack_pkts;
+	stats->s2c_pureack_pkts = (ptp->s2c).pureack_pkts;
+	stats->s2c_unique_bytes = (ptp->s2c).unique_bytes;
+	stats->s2c_data_pkts = (ptp->s2c).data_pkts;
+	stats->s2c_data_bytes = (ptp->s2c).data_bytes;
+	stats->s2c_rexmit_pkts = (ptp->s2c).rexmit_pkts;
+	stats->s2c_rexmit_bytes = (ptp->s2c).rexmit_bytes;
+	stats->s2c_out_order_pkts = (ptp->s2c).out_order_pkts;
+	stats->s2c_syn_count = (ptp->s2c).syn_count;
+	stats->s2c_fin_count = (ptp->s2c).fin_count;
+	
+	stats->s2c_ip = (ptp->addr_pair).b_address.un.ip4.s_addr;
+	stats->s2c_port = (ptp->addr_pair).b_port;
+	
+	stats->first_time = time2double(ptp->first_time);
+	stats->last_time = time2double(ptp->last_time);
+	stats->completion_time = stats->last_time - stats->first_time;
+	
+	stats->c2s_payload_start_time = time2double((ptp->c2s).payload_start_time) < stats->first_time ? 0 : time2double((ptp->c2s).payload_start_time) - stats->first_time;
+	stats->s2c_payload_start_time = time2double((ptp->s2c).payload_start_time) < stats->first_time ? 0 : time2double((ptp->s2c).payload_start_time) - stats->first_time;
+	stats->c2s_payload_end_time = time2double((ptp->c2s).payload_end_time) < stats->first_time ? 0 : time2double((ptp->c2s).payload_end_time) - stats->first_time;
+	stats->s2c_payload_end_time = time2double((ptp->s2c).payload_end_time) < stats->first_time ? 0 : time2double((ptp->s2c).payload_end_time) - stats->first_time;
+	stats->c2s_ack_start_time = time2double((ptp->c2s).ack_start_time) < stats->first_time ? 0 : time2double((ptp->c2s).ack_start_time) - stats->first_time;
+	stats->s2c_ack_start_time = time2double((ptp->s2c).ack_start_time) < stats->first_time ? 0 : time2double((ptp->s2c).ack_start_time) - stats->first_time;
+		
+	stats->complete = ConnComplete(ptp);
+	stats->reset = ConnReset(ptp);
+	stats->nocomplete = !stats->complete && !stats->reset;
+	
+	return stats;
+}
+
+tcs_list_elem *tcs_list_alloc(tcp_core_statistics *stats)
+{
+	tcs_list_elem *elem = malloc(sizeof *elem);
+	
+	if(tcs_list_start == NULL) tcs_list_start = elem;
+	
+	elem->stat=stats;
+	elem->next=NULL;
+	
+	if(tcs_list_curr != NULL)
+	{
+		tcs_list_curr->next=elem;
+		elem->prev=tcs_list_curr;
+	}
+	tcs_list_curr = elem;
+	
+	return elem;
+}
+
+void tcs_list_release_elem(tcs_list_elem *elem)
+{
+	free(elem->stat);
+	free(elem);
+}
+
+void tstat_tcs_list_release()
+{
+	if(tcs_list_start==NULL) return;
+	tcs_list_elem* tcs_list_cursor = tcs_list_start;
+	tcs_list_elem* tcs_list_cursor_next = NULL;
+	while(tcs_list_cursor!=NULL)
+	{
+		tcs_list_cursor_next = tcs_list_cursor->next;
+		tcs_list_release_elem(tcs_list_cursor);
+		tcs_list_cursor = tcs_list_cursor_next;
+	}
+	tcs_list_start=NULL;
+	tcs_list_curr=NULL;
+}
+
+void print_ip(unsigned int ip)
+{
+    unsigned char bytes[4];
+    bytes[0] = ip & 0xFF;
+    bytes[1] = (ip >> 8) & 0xFF;
+    bytes[2] = (ip >> 16) & 0xFF;
+    bytes[3] = (ip >> 24) & 0xFF;   
+    printf("%d.%d.%d.%d", bytes[0], bytes[1], bytes[2], bytes[3]);        
+}
+
+tcs_list_elem* tstat_return_tcp_pairs()
+{
+    int i = 0;
+    //printf("Tcp core statistics list elements\n");
+    //int valorized_tcp_pairs_pointers = 0;
+	
+    for(i=0;i<GLOBALS.Max_TCP_Pairs;i++)
+    //{
+		if(ttp[i]!=NULL)
+	//	{
+			tcs_list_alloc(from_tcp_pair_to_core_statistics(ttp[i]));
+	//		valorized_tcp_pairs_pointers++;
+	//	}
+	//}
+	
+	//printf("Number of tcp pairs pointers: %d\n",valorized_tcp_pairs_pointers);
+	return tcs_list_start;
+}
+
+void tstat_print_tcs_list_statistics()
+{
+	int num_tcs_list_elements = 0;
+	int num_tcs_list_elements_complete = 0;
+	int num_tcs_list_elements_nocomplete = 0;
+	tcs_list_elem* tcs_list_cursor = tcs_list_start;
+	
+	while(tcs_list_cursor!=NULL)
+	{
+		num_tcs_list_elements++;
+		//printf("\nStill alive1\n");	
+		print_ip(tcs_list_cursor->stat->c2s_ip);
+		
+		printf(" ");
+		print_ip(tcs_list_cursor->stat->s2c_ip);
+		printf(" %d %d ",tcs_list_cursor->stat->c2s_port,tcs_list_cursor->stat->s2c_port);
+		printf(" %d %d ",tcs_list_cursor->stat->c2s_port,tcs_list_cursor->stat->s2c_port);
+		printf(" %f ",tcs_list_cursor->stat->completion_time);
+		printf(" %f %f ",tcs_list_cursor->stat->c2s_payload_start_time,tcs_list_cursor->stat->c2s_payload_end_time);
+		printf(" %f %f ",tcs_list_cursor->stat->s2c_payload_start_time,tcs_list_cursor->stat->s2c_payload_end_time);
+	
+	
+		if(tcs_list_cursor->stat->nocomplete!=0)
+		{
+			num_tcs_list_elements_nocomplete++;
+			printf("NOCOMPLETE\n");
+		} else {
+			num_tcs_list_elements_complete++;
+			printf("COMPLETE\n");
+		}
+		tcs_list_cursor = tcs_list_cursor->next;
+		//printf("\n\nStill alive2\n\n");
+	}	
+	printf("Number of tcp core statistics list elements: %d\n",num_tcs_list_elements);
+	printf("Number of tcp core statistics list elements nocomplete: %d\n",num_tcs_list_elements_nocomplete);
+	printf("Number of tcp core statistics list elements complete: %d\n",num_tcs_list_elements_complete);	
+}
diff -ruN tstat/tstat.c tstat/tstat.c
--- tstat/tstat.c	2016-05-30 17:16:23.000000000 +0200
+++ tstat/tstat.c	2021-02-22 15:23:28.680000000 +0100
@@ -35,6 +35,13 @@
 #include "videoL7.h"
 #include "globals.h"
 
+/* Core statistics libtstat export includes*/
+#include <pcap.h>
+#include <sys/stat.h>
+//#include <libtstat.h>
+#include <unistd.h>
+#include "pcapwrapper.h"
+
 /* version information */
 char *tstat_version = VERSION;
 
@@ -4374,3 +4381,102 @@
     memset (&TLS_bitrate, 0, sizeof (struct TLS_bitrates));
     memset (&VIDEO_rate, 0, sizeof (struct VIDEO_rates));
 }
+
+/* Core statistics libtstat export functions */
+pcapwrapper_pfunc *pcktread;
+struct timeval current_time;
+int tlen;
+void *phys, *plast;
+struct ip *pip;
+int res;
+
+int tstat_export_core_statistics_init(const char *conf_fname, const char *trace_fname, int islive, int buffer_size, int timeout)
+{
+	printf("Opening config file ");
+    char *p = conf_fname;
+    if(p!=NULL)
+    while(*p!='\0')
+        printf("%c",*p++);
+    printf("\n");
+	/***************
+     * 1) init internal variables using command line options
+     **************/
+    tstat_init(conf_fname);
+	//tstat_init(NULL);
+    /***************
+     * 2) open trace file as stdin!!!
+     ***************/
+    if (trace_fname[0] != '-') {
+        //close(0);
+        open(trace_fname, O_RDONLY);
+    }
+
+
+    /***************
+     * 2.1) init demo internal structs to read a pcap file
+     *      (this code is derived from original tcpdump.c)
+     ***************/
+    printf("Opening capture file ");
+    char *p2 = trace_fname;
+    while(*p2!='\0')
+        printf("%c",*p2++);
+    printf("\n");
+    pcktread = pcapwrapper_init(trace_fname, islive, buffer_size, timeout);
+    if (pcktread == NULL) {
+        printf("errore di apertura del file %s\n", trace_fname);
+        return 1;
+    }
+
+	res = (*pcktread)(&current_time, &pip, &plast, &tlen);
+    if (trace_fname[0] == '-')
+        tstat_new_logdir("stdin", &current_time);
+    else
+        tstat_new_logdir(trace_fname, &current_time);
+}
+
+/* Core statistics libtstat export functions */
+//chunk size=0 --> read everything
+int tstat_export_core_statistics_read_chunk(/*tcs_list_elem *list_head, */int chunk_size, char verbose)
+{
+	int num_pkts = 0;
+	do {
+        // 4) elaborate current packet
+        res = tstat_next_pckt(&current_time, pip, plast, tlen, 0);
+		
+		// 5) read the next packet
+        //    res == 0  : no more packets
+        //    res == 1  : one packet readed
+        //    res == -1 : error
+        res = (*pcktread)(&current_time, &pip, &plast, &tlen);
+		
+		if(res<0)
+			return res;
+		if(verbose) printf("Read packet %d\n",num_pkts);
+		if(chunk_size!=0)
+			if(++num_pkts%chunk_size==0 && res == 1)
+			{
+				tstat_return_tcp_pairs();
+				if(verbose) printf("Returned tcp pairs\n");
+				if(verbose) tstat_print_tcs_list_statistics();
+				return res;
+				//tstat_tcs_list_release() should be called by the caller after elaborating the list contents
+			}
+    }        
+    while(res == 1);
+    
+    tstat_return_tcp_pairs();
+	if(verbose) tstat_print_tcs_list_statistics();
+    
+    return res;
+    //tstat_tcs_list_release() should be called by the caller after elaborating the list contents
+}
+
+void tstat_export_core_statistics_close(int verbose)
+{
+	 /***************
+	 * 6) flush statistics and print a report
+	 ***************/
+	tstat_report report;
+	tstat_close(&report);
+	if(verbose) tstat_print_report(&report, stdout);
+}
